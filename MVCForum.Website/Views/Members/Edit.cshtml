@using MVCForum.Website.Application.ExtensionMethods
@model MVCForum.Website.ViewModels.MemberFrontEndEditViewModel

@{
    Layout = "~/Views/Shared/_LayoutFullWidth.cshtml";
    ViewBag.Title = Html.LanguageString("Members.EditProfile");
    var settings = Html.Settings();
}
@section Header
{
    <script type="text/javascript">
        $.ajax({
            url: app_base + 'Badge/ProfileBadgeCheck',
            type: 'POST',
            error: function (xhr, ajaxOptions, thrownError) {
                ShowUserMessage("Error: " + xhr.status + " " + thrownError);
            }
        });
    </script>

}
<div class="row">

    <div class="col-md-6 col-md-offset-3">

        <script type="text/javascript">
            $(document).ready(function () {
                GetByJquery();
                $("#HomeTownProvince").change(function () { GetHometownCity(); });
                $("#HomeTownCity").change(function () { GetHometownCountry(); });

                $("#SchoolProvince").change(function () { GetEducationCity(); });
            });

            function GetByJquery() {
                var htprovince = $("#HomeTownProvince").val();
                $("#HomeTownProvince").empty();
                $.getJSON("/Members/GetHometownProvince/", function (data) {
                    $.each(data, function (i, item) {
                        if (item["ProvinceId"] == htprovince) {
                            $("<option selected ></option>")
                                     .val(item["ProvinceId"])
                                     .text(item["ProvinceName"])
                                     .appendTo($("#HomeTownProvince"));
                        }
                        else {
                            $("<option></option>")
                                     .val(item["ProvinceId"])
                                     .text(item["ProvinceName"])
                                     .appendTo($("#HomeTownProvince"));
                        }

                    });
                    GetHometownCity();
                });

                var htprovince2 = $("#SchoolProvince").val();
                $("#SchoolProvince").empty();
                $.getJSON("/Members/GetHometownProvince/", function (data) {
                    $.each(data, function (i, item) {
                        if (item["ProvinceId"] == htprovince2) {
                            $("<option selected></option>")
                                     .val(item["ProvinceId"])
                                     .text(item["ProvinceName"])
                                     .appendTo($("#SchoolProvince"));
                        }
                        else {
                            $("<option></option>")
                                        .val(item["ProvinceId"])
                                        .text(item["ProvinceName"])
                                        .appendTo($("#SchoolProvince"));
                        }
                    });
                    GetEducationCity();
                });
            }

            function GetEducationCity() {
                var htcity = $("#SchoolCity").val();

                $("#SchoolCity").empty();
                var url = "/Members/GetEducationCity/" + $("#SchoolProvince").val() + "/";
                $.getJSON(url, function (data) {
                    $.each(data, function (i, item) {

                        if (item["CityId"] == htcity) {
                            $("<option selected></option>")
                                     .val(item["CityId"])
                                     .text(item["CityName"])
                                     .appendTo($("#SchoolCity"));
                        }
                        else {
                            $("<option></option>")
                                     .val(item["CityId"])
                                     .text(item["CityName"])
                                     .appendTo($("#SchoolCity"));
                        }
                    });
                });
            }

            function GetHometownCity() {
                var htcity = $("#HomeTownCity").val();

                $("#HomeTownCity").empty();
                var url = "/Members/GetHometownCity/" + $("#HomeTownProvince").val() + "/";
                var a = $(".HomeTownProvince");

                $.getJSON(url, function (data) {

                    $.each(data, function (i, item) {
                        if (item["CityId"] == htcity) {
                            $("<option selected ></option>")
                                      .val(item["CityId"])
                                      .text(item["CityName"])
                                      .appendTo($("#HomeTownCity"));
                        }
                        else {
                            $("<option></option>")
                                      .val(item["CityId"])
                                      .text(item["CityName"])
                                      .appendTo($("#HomeTownCity"));
                        }

                    });
                    GetHometownCountry();
                });
            }

            function GetHometownCountry() {
                var County = $("#HomeTownCounty").val();

                $("#HomeTownCounty").empty();
                var url = "/Members/GetHometownCountry/" + $("#HomeTownProvince").val() + "," + $("#HomeTownCity").val() + "/";
                $.getJSON(url, function (data) {
                    $.each(data, function (i, item) {

                        if (item["CountryId"] == County) {
                            $("<option selected ></option>")
                                      .val(item["CountryId"])
                                      .text(item["CountryName"])
                                      .appendTo($("#HomeTownCounty"));
                        }
                        else {
                            $("<option></option>")
                                      .val(item["CountryId"])
                                      .text(item["CountryName"])
                                      .appendTo($("#HomeTownCounty"));
                        }

                    });
                });
            }
        </script>

        @using (Html.BeginForm("Edit", "Members", FormMethod.Post, new { enctype = "multipart/form-data", @class = "editmemberform" }))
        {
            @Html.HiddenFor(x => Model.Id)

            @Html.ValidationSummary(true)

            <fieldset>
                <legend>@ViewBag.Title</legend>

                <p class="changepasswordtext">
                    @Html.Raw(string.Format(Html.LanguageString("Members.ChangePassword.Link"), string.Format("<a href=\"{0}\">{1}</a>", Url.Action("ChangePassword"), Html.LanguageString("Members.ChangePassword.Title"))))
                </p>

                <div class="form-group">
                    @Html.LabelFor(x => x.UserName)
                    @Html.TextBoxFor(x => x.UserName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.UserName)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.RealName)
                    @Html.TextBoxFor(x => x.RealName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.RealName)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Gender)
                    @Html.DropDownListFor(x => x.Gender, ViewData["GenderList"] as List<SelectListItem>, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Gender)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Birthday)
                    @Html.TextBoxFor(x => x.Birthday, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Birthday)
                </div>

                <div class="checkbox">
                    @using (Html.BeginLabelFor(m => m.IsLunarCalendar, new { @class = "checkbox" }))
                    {
                        @Html.CheckBoxFor(m => m.IsLunarCalendar)
                    }
                    @Html.ValidationMessageFor(m => m.IsLunarCalendar)
                </div>

                <div class="checkbox">
                    @using (Html.BeginLabelFor(m => m.IsMarried, new { @class = "checkbox" }))
                    {
                        @Html.CheckBoxFor(m => m.IsMarried)
                    }
                    @Html.ValidationMessageFor(m => m.IsMarried)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Height)
                    @Html.TextBoxFor(x => x.Height, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Height)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Weight)
                    @Html.TextBoxFor(x => x.Weight, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Weight)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Education)
                    @Html.DropDownListFor(x => x.Education, ViewData["EducationList"] as List<SelectListItem>, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Education)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Location)
                    @Html.TextBoxFor(x => x.Location, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Location)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.SchoolProvince)
                    @Html.DropDownListFor(x => x.SchoolProvince, ViewData["SchoolProvinceList"] as List<SelectListItem>, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.SchoolProvince)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.SchoolCity)
                    @Html.DropDownListFor(x => x.SchoolCity, ViewData["SchoolCityList"] as List<SelectListItem>, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.SchoolCity)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.SchoolName)
                    @Html.TextBoxFor(x => x.SchoolName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.SchoolName)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.HomeTownProvince)
                    @Html.DropDownListFor(x => x.HomeTownProvince, ViewData["HomeTownProvinceList"] as List<SelectListItem>, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.HomeTownProvince)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.HomeTownCity)
                    @Html.DropDownListFor(x => x.HomeTownCity, ViewData["HomeTownCityList"] as List<SelectListItem>, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.HomeTownCity)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.HomeTownCounty)
                    @Html.DropDownListFor(x => x.HomeTownCounty, ViewData["HomeTownCountyList"] as List<SelectListItem>, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.HomeTownCounty)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Job)
                    @Html.TextBoxFor(x => x.Job, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Job)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.IncomeRange)
                    @Html.DropDownListFor(x => x.IncomeRange, ViewData["IncomeRangeList"] as List<SelectListItem>, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.IncomeRange)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Interest)
                    @Html.TextBoxFor(x => x.Interest, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Interest)
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.MobilePhone)
                    @Html.TextBoxFor(x => x.MobilePhone, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.MobilePhone)
                </div>

                @if (settings.EnableSignatures)
                {
                    <div class="form-group">
                        @Html.LabelFor(x => x.Signature)
                        @Html.TextAreaFor(x => x.Signature, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.Signature)
                    </div>
                }
                <div class="form-group">
                    请注意：为保证交友的严肃性，爱驴网会对您填写的资料进行审核，只有审核通过后才能使用相关功能。工作人员会在8小时内处理完毕。若需紧急处理可以拨打客服电话，谢谢！
                </div>
                <div class="submit-holder">
                    <button type="submit" class="btn-mvc-green btn-mvc-large">@Html.LanguageString("Buttons.Save")</button>
                </div>

            </fieldset>
        }

    </div>
</div>